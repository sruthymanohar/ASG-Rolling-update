---
- name: "Creating Dynamic Invetory Of Autoscaling Group"
  hosts: localhost
  vars:
    - variable.vars
  tasks:
    - name: "Installing pip"
      yum:
        name: pip
        state: present

    - name: "Installing boto3"
      pip:
        name: boto3
        state: present

    - name: "Autoscale - Getting Ec2 Instacne details"
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:aws:autoscaling:groupName": "{{ tag_name }}"
          instance-state-name: [ "running"]
      register: asg_instances


    - name: "Autoscale - Creating Inventory Of Autoscaling Ec2"
      add_host:
        name: "{{ item.public_ip_address }}"
        groups: "asg"
        ansible_host: "{{ item.public_ip_address }}"
        ansible_port: 22
        ansible_user: "ec2-user"
        ansible_ssh_private_key_file: "{{ private_key }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items:
        - "{{ asg_instances.instances }}"


- name: "Deploying Website From Github To Asg"
  become: true
  hosts: asg
  serial: 1
  vars_files:
    - variables.vars
  tasks:

    - name: "Installing Packages"
      yum:
        name:
          - httpd
          - git
        state: present

    - name: "Crating Clone Directory"
      file:
        path: "{{ cloneDir }}"
        state: directory

    - name: "Cloning GitRepository"
      git:
        repo: "{{ gitRepository }}"
        dest: "{{ cloneDir }}"
      register: cloneStatus

    - name: "Disabling HealthCheck"
      when: cloneStatus.changed
      file:
        path: "/var/www/html/health.txt"
        state: file
        mode: 0000

    - name: "Off Loading Ec2 From ElB"
      when: cloneStatus.changed
      pause:
        seconds: "{{ health_time }}"

    - name: "Moving Contents From CloneDir To DocumentRoot"
      when: cloneStatus.changed
      copy:
        src: "{{ cloneDir }}"
        dest: /var/www/html/
        remote_src: true
    - name: "Moving contents to index.html"
      replace:
        path: /var/www/html/index.html
        regexp: 'hostname'
        replace: '{{ ansible_fqdn }}'


    - name: "Restarting/Enabling httpd"
      when: cloneStatus.changed
      service:
        name: httpd
        state: restarted
        enabled: true

    - name: "Disabling HealthCheck"
      when: cloneStatus.changed
      file:
        path: "/var/www/html/health.txt"
        state: file
        mode: 0644

    - name: "Loading Ec2 Back To ElB"
      when: cloneStatus.changed
      pause:
        seconds: "{{ health_time }}"
